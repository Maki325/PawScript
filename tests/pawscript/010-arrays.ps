// printCharArray => (chars: &[char], index: int) {
//   if(chars.len() >= index) return;
//   beta_print chars[index];
//   printCharArray(chars, index + 1);
// }

printCharArray5 => (chars: [char; 5], index: int) {
  if(index == 5) {
    return;
  }
  beta_print chars[index];

  printCharArray5(chars, index + 1);
}
printCharArray7 => (chars: [char; 7], index: int) {
  if(index == 7) {
    return;
  }
  beta_print chars[index];

  printCharArray7(chars, index + 1);
}
printIntArray5 => (ints: [int; 5], index: int) {
  if(index == 5) {
    return;
  }
  beta_print ints[index];

  printIntArray5(ints, index + 1);
}
printBoolArray4 => (bools: [bool; 4], index: int) {
  if(index == 4) {
    return;
  }
  beta_print bools[index];

  printBoolArray4(bools, index + 1);
}

println => (c: char) {
  const newline: char = 10;
  if(c == 0) {
    beta_print newline;
    return;
  }
  beta_print c;
  beta_print newline;
}

main => (): int {
  // Define with both type and length
  const hello: [char; 5] = ['H', 'e', 'l', 'l', 'o'];

  // Define with just the type, but we need assignment after it, so we can know the size
  const markos: [char] = ['M', 'a', 'r', 'k', 'o', '\'', 's'];

  // Define implicitly
  const world = ['W', 'o', 'r', 'l', 'd'];

  const testing = hello;

  println(hello[1]);
  println(testing[1]);

  const l = hello[2];
  println(l);
  const l2 = testing[2];
  println(l2);

  printCharArray5(hello, 0);
  beta_print ' ';
  printCharArray7(markos, 0);
  beta_print ' ';
  printCharArray5(world, 0);
  beta_print '\n';

  printCharArray5(['W', 'o', 'r', 'l', 'd'], 0);
  beta_print '\n';

  const intArray = [1, 2, 3, 4, 5];
  printIntArray5(intArray, 0);

  const boolArray = [true, false, false, true];
  printBoolArray4(boolArray, 0);

  return 0;
}